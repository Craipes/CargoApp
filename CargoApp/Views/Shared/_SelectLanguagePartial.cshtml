@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options

@inject IHtmlLocalizer<SharedResource> Localizer
@inject IOptions<RequestLocalizationOptions> LocOptions

@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = LocOptions?.Value?.SupportedUICultures?
        .Select(c => new SelectListItem { Value = c.Name, Text = c.DisplayName })
        .ToList();
    var returnUrl = string.IsNullOrEmpty(Context.Request.Path) ? $"~/{Context.Request.QueryString.Value}" : $"~{Context.Request.Path.Value}{Context.Request.QueryString.Value}";
    bool success = requestCulture != null && cultureItems != null;
}

@if (success)
{
    <div title="@Localizer["Request culture provider:"] @requestCulture?.Provider?.GetType().Name">
        <form id="selectLanguage" asp-controller="Home" asp-action="SetLanguage" asp-route-returnUrl="@returnUrl" method="post" class="row" role="form">
            <div class="col-auto">
                <label class="col-form-label" asp-for="@requestCulture!.RequestCulture.UICulture.Name">@Localizer["Language:"]</label>
            </div>
            <div class="col-auto">
                <select class="form-select border-0" name="culture" onchange="this.form.submit();" asp-for="@requestCulture!.RequestCulture.UICulture.Name" asp-items="cultureItems">
                </select>
            </div>
        </form>
    </div>
}