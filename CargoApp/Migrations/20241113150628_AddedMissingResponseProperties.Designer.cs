// <auto-generated />
using System;
using System.Collections.Generic;
using CargoApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CargoApp.Migrations
{
    [DbContext(typeof(CargoAppContext))]
    [Migration("20241113150628_AddedMissingResponseProperties")]
    partial class AddedMissingResponseProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CargoApp.Models.CarRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeparturePlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("EarlyDepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LateDepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedsGPS")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PriceType")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.ComplexProperty<Dictionary<string, object>>("Cargo", "CargoApp.Models.CarRequest.Cargo#Cargo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.Property<decimal?>("Height")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal?>("Length")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal>("Mass")
                                .HasColumnType("decimal(8, 3)");

                            b1.Property<int>("TrailerType")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Volume")
                                .HasColumnType("decimal(9, 4)");

                            b1.Property<decimal?>("Width")
                                .HasColumnType("decimal(5, 2)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CarRequests");
                });

            modelBuilder.Entity("CargoApp.Models.CarResponse", b =>
                {
                    b.Property<int>("CarRequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Car", "CargoApp.Models.CarResponse.Car#Car", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("AvailableGPS")
                                .HasColumnType("bit");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal?>("MaxHeight")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal?>("MaxLength")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal>("MaxMass")
                                .HasColumnType("decimal(8, 1)");

                            b1.Property<decimal?>("MaxVolume")
                                .HasColumnType("decimal(9, 4)");

                            b1.Property<decimal?>("MaxWidth")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<int>("TrailerType")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int");
                        });

                    b.HasKey("CarRequestId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CarResponses");
                });

            modelBuilder.Entity("CargoApp.Models.CargoRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeparturePlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PriceType")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.ComplexProperty<Dictionary<string, object>>("Car", "CargoApp.Models.CargoRequest.Car#Car", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("AvailableGPS")
                                .HasColumnType("bit");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal?>("MaxHeight")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal?>("MaxLength")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal>("MaxMass")
                                .HasColumnType("decimal(8, 1)");

                            b1.Property<decimal?>("MaxVolume")
                                .HasColumnType("decimal(9, 4)");

                            b1.Property<decimal?>("MaxWidth")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<int>("TrailerType")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CargoRequests");
                });

            modelBuilder.Entity("CargoApp.Models.CargoResponse", b =>
                {
                    b.Property<int>("CargoRequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Cargo", "CargoApp.Models.CargoResponse.Cargo#Cargo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.Property<decimal?>("Height")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal?>("Length")
                                .HasColumnType("decimal(5, 2)");

                            b1.Property<decimal>("Mass")
                                .HasColumnType("decimal(8, 3)");

                            b1.Property<int>("TrailerType")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Volume")
                                .HasColumnType("decimal(9, 4)");

                            b1.Property<decimal?>("Width")
                                .HasColumnType("decimal(5, 2)");
                        });

                    b.HasKey("CargoRequestId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CargoResponses");
                });

            modelBuilder.Entity("CargoApp.Models.Review", b =>
                {
                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("ReceiverId", "SenderId");

                    b.HasIndex("SenderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CargoApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CargoApp.Models.CarRequest", b =>
                {
                    b.HasOne("CargoApp.Models.User", "User")
                        .WithMany("CarRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CargoApp.Models.CarResponse", b =>
                {
                    b.HasOne("CargoApp.Models.CarRequest", "CarRequest")
                        .WithMany("Responses")
                        .HasForeignKey("CarRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CargoApp.Models.User", "User")
                        .WithMany("CarResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CargoApp.Models.CargoRequest", b =>
                {
                    b.HasOne("CargoApp.Models.User", "User")
                        .WithMany("CargoRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CargoApp.Models.CargoResponse", b =>
                {
                    b.HasOne("CargoApp.Models.CargoRequest", "CargoRequest")
                        .WithMany("Responses")
                        .HasForeignKey("CargoRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CargoApp.Models.User", "User")
                        .WithMany("CargoResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CargoRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CargoApp.Models.Review", b =>
                {
                    b.HasOne("CargoApp.Models.User", "Receiver")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CargoApp.Models.User", "Sender")
                        .WithMany("ReviewsSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CargoApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CargoApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CargoApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CargoApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CargoApp.Models.CarRequest", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CargoApp.Models.CargoRequest", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CargoApp.Models.User", b =>
                {
                    b.Navigation("CarRequests");

                    b.Navigation("CarResponses");

                    b.Navigation("CargoRequests");

                    b.Navigation("CargoResponses");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("ReviewsSent");
                });
#pragma warning restore 612, 618
        }
    }
}
