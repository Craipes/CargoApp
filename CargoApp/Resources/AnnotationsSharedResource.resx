<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Trailer Any" xml:space="preserve">
    <value>Any</value>
  </data>
  <data name="Trailer Closed" xml:space="preserve">
    <value>Closed</value>
  </data>
  <data name="Trailer Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Trailer Container" xml:space="preserve">
    <value>Container</value>
  </data>
  <data name="Trailer Tilted" xml:space="preserve">
    <value>Tilted</value>
  </data>
  <data name="Trailer Refrigerator" xml:space="preserve">
    <value>Refrigerator</value>
  </data>
  <data name="Trailer Isothermal Van" xml:space="preserve">
    <value>Isothermal Van</value>
  </data>
  <data name="Trailer Minibus" xml:space="preserve">
    <value>Minibus</value>
  </data>
  <data name="Trailer Flatbed" xml:space="preserve">
    <value>Flatbed</value>
  </data>
  <data name="Trailer Dump Truck" xml:space="preserve">
    <value>Dump Truck</value>
  </data>
  <data name="Trailer Crane" xml:space="preserve">
    <value>Crane</value>
  </data>
  <data name="Trailer Car Carrier" xml:space="preserve">
    <value>Car Carrier</value>
  </data>
  <data name="Trailer Tank" xml:space="preserve">
    <value>Tank</value>
  </data>
  <data name="Trailer Timber Truck" xml:space="preserve">
    <value>Timber Truck</value>
  </data>
  <data name="Trailer Truck-Tractor" xml:space="preserve">
    <value>Truck-Tractor</value>
  </data>
  <data name="Car Truck" xml:space="preserve">
    <value>Truck</value>
  </data>
  <data name="Car Any" xml:space="preserve">
    <value>Any</value>
  </data>
  <data name="Car Semitrailer" xml:space="preserve">
    <value>Semitrailer</value>
  </data>
  <data name="Car Trailer" xml:space="preserve">
    <value>Trailer</value>
  </data>
  <data name="Price Negotiable" xml:space="preserve">
    <value>Negotiable</value>
  </data>
  <data name="Price Fixed" xml:space="preserve">
    <value>Fixed</value>
  </data>
  <data name="Price Per Kilometer" xml:space="preserve">
    <value>Per Kilometer</value>
  </data>
  <data name="Price Per Ton" xml:space="preserve">
    <value>Per Ton</value>
  </data>
  <data name="Request Visible" xml:space="preserve">
    <value>Visible</value>
  </data>
  <data name="Request Closed" xml:space="preserve">
    <value>Closed</value>
  </data>
  <data name="Request Hidden" xml:space="preserve">
    <value>Hidden</value>
  </data>
  <data name="Request Hidden By Admin" xml:space="preserve">
    <value>Hidden By Admin</value>
  </data>
  <data name="Max mass" xml:space="preserve">
    <value>Max mass</value>
  </data>
  <data name="Car type" xml:space="preserve">
    <value>Car type</value>
  </data>
  <data name="Trailer type" xml:space="preserve">
    <value>Trailer type</value>
  </data>
  <data name="Max length" xml:space="preserve">
    <value>Max length</value>
  </data>
  <data name="Max width" xml:space="preserve">
    <value>Max width</value>
  </data>
  <data name="Max height" xml:space="preserve">
    <value>Max height</value>
  </data>
  <data name="Max volume" xml:space="preserve">
    <value>Max volume</value>
  </data>
  <data name="GPS available" xml:space="preserve">
    <value>GPS available</value>
  </data>
  <data name="Mass" xml:space="preserve">
    <value>Mass</value>
  </data>
  <data name="Volume" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="Destination place" xml:space="preserve">
    <value>Destination place</value>
  </data>
  <data name="Departure place" xml:space="preserve">
    <value>Departure place</value>
  </data>
  <data name="Departure time" xml:space="preserve">
    <value>Departure time</value>
  </data>
  <data name="Early departure time" xml:space="preserve">
    <value>Early departure time</value>
  </data>
  <data name="Late departure time" xml:space="preserve">
    <value>Late departure time</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="Needs GPS?" xml:space="preserve">
    <value>Needs GPS?</value>
  </data>
  <data name="Width" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="Height" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="Has GPS?" xml:space="preserve">
    <value>Has GPS?</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Contact name" xml:space="preserve">
    <value>Contact name</value>
  </data>
  <data name="Contact phone" xml:space="preserve">
    <value>Contact phone</value>
  </data>
  <data name="Contact email" xml:space="preserve">
    <value>Contact email</value>
  </data>
  <data name="Price type" xml:space="preserve">
    <value>Price type</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Request status" xml:space="preserve">
    <value>Request status</value>
  </data>
  <data name="Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Points" xml:space="preserve">
    <value>Points count</value>
  </data>
  <data name="Review" xml:space="preserve">
    <value>Review</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Default phone number" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="Adding time" xml:space="preserve">
    <value>Adding time</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Rating" xml:space="preserve">
    <value>Rating</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Remember me" xml:space="preserve">
    <value>Remember me</value>
  </data>
  <data name="Confirm password" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="Reviews received count:" xml:space="preserve">
    <value>Reviews received count:</value>
  </data>
  <data name="Reviews sent count:" xml:space="preserve">
    <value>Reviews sent count:</value>
  </data>
  <data name="Car requests count:" xml:space="preserve">
    <value>Car requests count:</value>
  </data>
  <data name="Cargo requests count:" xml:space="preserve">
    <value>Cargo requests count:</value>
  </data>
  <data name="Car responses count:" xml:space="preserve">
    <value>Car responses count:</value>
  </data>
  <data name="Cargo responses count:" xml:space="preserve">
    <value>Cargo responses count:</value>
  </data>
  <data name="Too early" xml:space="preserve">
    <value>Too early</value>
  </data>
  <data name="Too late" xml:space="preserve">
    <value>Too late</value>
  </data>
  <data name="Should be later than early date" xml:space="preserve">
    <value>Should be later than early date</value>
  </data>
  <data name="Range Error" xml:space="preserve">
    <value>Value of field "{0}" should be between {1} and {2}</value>
  </data>
  <data name="Required Error" xml:space="preserve">
    <value>The field "{0}" is required</value>
  </data>
  <data name="Max Length Error" xml:space="preserve">
    <value>Max length of field "{0}" should be {1}</value>
  </data>
  <data name="Phone Error" xml:space="preserve">
    <value>Field "{0}" should be a phone number</value>
  </data>
  <data name="Email Error" xml:space="preserve">
    <value>Field "{0}" should be an email</value>
  </data>
  <data name="Number Error" xml:space="preserve">
    <value>Field "{0}" should be a number</value>
  </data>
  <data name="Volume Or Dimensions Error" xml:space="preserve">
    <value>Volume or dimensions must be specified</value>
  </data>
  <data name="Invalid property specified" xml:space="preserve">
    <value>Invalid property specified</value>
  </data>
  <data name="Invalid data format" xml:space="preserve">
    <value>Invalid data format</value>
  </data>
  <data name="Sender" xml:space="preserve">
    <value>Sender</value>
  </data>
  <data name="Receiver" xml:space="preserve">
    <value>Receiver</value>
  </data>
  <data name="Min Length Error" xml:space="preserve">
    <value>Min length of field "{0}" should be {1}</value>
  </data>
  <data name="Compare Error" xml:space="preserve">
    <value>"{0}" and "{1}" do not match</value>
  </data>
</root>